{"version":3,"sources":["components/IntroScreen.js","components/RatSelect.js","components/TalkingToRats.js","components/RoseCeremony.js","components/AnimeEnding.js","App.js","index.js"],"names":["IntroScreen","id","onClick","this","props","React","Component","RatSelect","onClickSelectRats","setActiveRats","state","selectedRats","advanceState","selectRatsButton","ratName","element","document","getElementById","indexOf","index","newSelectedRats","splice","setState","classList","remove","length","numRatsInGame","push","add","ratsList","i","filename","rats","console","log","className","selectRat","name","src","join","TalkingToRats","ratNames","activeRatNames","sort","a","b","Math","random","activeRats","map","getRatByName","responses","responsesJson","charSpeed","ratIndex","charsRevealed","startTextMoving","getRandomResponses","interval","window","setInterval","dialogue","round","clearInterval","newRatIndex","goToRoseCeremony","responseText","responseDiv","submitResponse","bind","ratDialogue","substring","RoseCeremony","numRoses","giveRosesButton","endRoseCeremony","AnimeEnding","finalRat","restartGame","RatchelorGame","numRounds","rosesPerRound","gameStage","roundNum","ratsJson","newRoundNum","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e21521c8.chunk.js","sourcesContent":["import React from \"react\";\n\nclass IntroScreen extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div id=\"introScreen\">\n        <button onClick={this.props.onClick}>Embark</button>\n        <div id=\"hideme\"/>\n    </div>\n    );\n  }\n}\n\nexport default IntroScreen;\n\n","import React from \"react\";\n\nclass RatSelect extends React.Component {\n  constructor() {\n    super();\n\n    // Once you've select the rats, advance to the next stage\n    this.onClickSelectRats = () => {\n      this.props.setActiveRats(this.state.selectedRats);\n      this.props.advanceState();\n    }\n\n    this.state = {\n      selectedRats: [],\n      selectRatsButton: \"\"\n    }\n  }\n\n  // When a rat is clicked\n  selectRat(ratName, id) {\n    // Get the element for the current rat button\n    const element = document.getElementById(id);\n\n    // If it's already chosen, deselect it\n    if (this.state.selectedRats.indexOf(ratName) != -1) {\n      const index = this.state.selectedRats.indexOf(ratName);\n      const newSelectedRats = this.state.selectedRats;\n      newSelectedRats.splice(index, 1);\n      this.setState({selectedRats: newSelectedRats});\n      element.classList.remove(\"selectedRat\");\n      this.setState({selectRatsButton: \"\"})\n      return;\n    }\n\n    // If you've already selected the max rats, you can't select another\n    if (this.state.selectedRats.length === this.props.numRatsInGame) {\n      return;\n    }\n\n    // Otherwise, select this rat\n    let newSelectedRats = this.state.selectedRats;\n    newSelectedRats.push(ratName);\n    element.classList.add(\"selectedRat\");\n\n    // If that was the final rat, display the advance button\n    if (this.state.selectedRats.length === this.props.numRatsInGame) {\n      let selectRatsButton = <button onClick={this.onClickSelectRats}>Select Rats</button>\n      this.setState({selectRatsButton});\n    } else {\n      this.setState({selectRatsButton: \"\"});\n    }\n\n    // Force a UI update for the rat list\n    this.setState({});\n  }\n\n  render() {\n    let ratsList = []\n    // Create a clickable div for every rat in the game\n    for (let i = 0; i < this.props.rats.length; i++) {\n      let filename = `/ratchelor/img/Characters/${this.props.rats[i].filename}.png`\n      console.log(filename);\n      ratsList.push(\n        <div key={i} id={`rat${i}`} className=\"ratList\" onClick={() => {\n            this.selectRat(this.props.rats[i].name, `rat${i}`);\n          }}>\n          {`${this.props.rats[i].name}`}\n          <img src={filename}/>\n        </div>\n      )\n    }\n    \n    return (\n      <div id=\"ratSelectScreen\">\n        <div>Choose your {`${this.props.numRatsInGame}`} lovely contestants:</div>\n        {ratsList}\n        <div>Chosen: {this.state.selectedRats.join(\",\")}</div>\n        {this.state.selectRatsButton}\n    </div>\n    );\n  }\n}\n\nexport default RatSelect;\n\n","import React from \"react\";\nimport responsesJson from '../responses.json';\n\n\nclass TalkingToRats extends React.Component {\n  constructor(props) {\n    super(props);\n    // Randomly shuffle the rats for this round\n    this.ratNames = props.activeRatNames.sort(function (a, b) { return 0.5 - Math.random() })\n    // Get all of the round's rats based on their names\n    this.activeRats = this.ratNames.map((ratName) => this.props.getRatByName(ratName));\n    // Store all of your canned responses in an array\n    this.responses = responsesJson;\n    this.charSpeed = 36;\n    this.state = {\n      ratIndex: 0,\n      charsRevealed: 0,\n      responses: [],\n    }\n  }\n\n  componentDidMount() {\n    this.startTextMoving();\n    this.getRandomResponses();\n  }\n\n  startTextMoving() {\n    this.setState({charsRevealed: 0});\n    this.interval = window.setInterval(() => {\n      let charsRevealed = this.state.charsRevealed + 1;\n      if (charsRevealed > this.activeRats[this.state.ratIndex].dialogue[this.props.round].length) {\n      } else {\n        this.setState({charsRevealed})\n      }\n    }, this.charSpeed)\n  }\n\n  // After you submit your response, choose a new rat\n  submitResponse() {\n    window.clearInterval(this.interval)\n    this.startTextMoving();\n    this.getRandomResponses();\n    let newRatIndex = this.state.ratIndex + 1;\n    // If that was the last rat, advance to the rose ceremony\n    if (newRatIndex === this.ratNames.length) {\n      this.props.goToRoseCeremony();\n    } else {\n      this.setState ({ratIndex: newRatIndex})\n    }\n  }\n\n  getRandomResponses() {\n    // Make sure we get random, different responses\n    const numResponses = 3;\n    // Shuffle all responses\n    responsesJson.sort( () => .5 - Math.random() )\n    let responses = [];\n    // Choose the first n\n    for (let i = 0; i < numResponses; i++) {\n      let responseText = responsesJson[i]\n      let responseDiv = <button onClick={this.submitResponse.bind(this)} key={i}>{responseText}</button>\n      responses.push(responseDiv);\n    }\n    this.setState({responses});\n  }\n\n  // You get a random rat, they talk to you, you can respond, after you respond another rat shows up\n  render() {\n    let ratDialogue = this.activeRats[this.state.ratIndex].dialogue[this.props.round].substring(0, this.state.charsRevealed);\n    if (ratDialogue.length === 0) ratDialogue = \".\";\n    return (\n      <div id=\"talkingToRatsScreen\">\n      <div id=\"dialogueContainer\">\n        <div id=\"ratName\">{this.activeRats[this.state.ratIndex].name}</div>\n        <div id=\"ratDialogue\">{ratDialogue}</div>\n      </div>\n      <div id=\"responses\">{this.state.responses}</div>\n    </div>\n    );\n  }\n}\n\nexport default TalkingToRats;\n\n","import React from \"react\";\n\nclass RoseCeremony extends React.Component {\n  constructor(props) {\n    super(props);\n    // Randomly shuffle the rats for this round\n    this.ratNames = props.activeRatNames.sort(function (a, b) { return 0.5 - Math.random() })\n    // Get all of the round's rats based on their names\n    this.activeRats = this.ratNames.map((ratName) => this.props.getRatByName(ratName));\n    // How many roses you have to give out\n    this.numRoses = this.props.numRoses;\n\n    this.state = {\n      selectedRats: [],\n      giveRosesButton: \"\"\n    }\n  }\n\n  // When a rat is clicked\n  selectRat(ratName, id) {\n    // Get the element for the current rat button\n    const element = document.getElementById(id);\n\n    // If it's already chosen, deselect it\n    if (this.state.selectedRats.indexOf(ratName) != -1) {\n      const index = this.state.selectedRats.indexOf(ratName);\n      const newSelectedRats = this.state.selectedRats;\n      newSelectedRats.splice(index, 1);\n      this.setState({selectedRats: newSelectedRats});\n      element.classList.remove(\"selectedRat\");\n      this.setState({giveRosesButton: \"\"})\n      return;\n    }\n\n    // If you've already selected the max rats, you can't select another\n    if (this.state.selectedRats.length === this.numRoses) {\n      return;\n    }\n\n    // Otherwise, select this rat\n    let newSelectedRats = this.state.selectedRats;\n    newSelectedRats.push(ratName);\n    element.classList.add(\"selectedRat\");\n\n    // If that was the final rat, display the advance button\n    if (this.state.selectedRats.length === this.numRoses) {\n      let giveRosesButton = <button onClick={this.endRoseCeremony.bind(this)}>Give roses</button>\n        this.setState({giveRosesButton})\n    } else {\n      this.setState({giveRosesButton: \"\"});\n    }\n\n    // Force a UI update for the rat list\n    this.setState({});\n  }\n\n  endRoseCeremony() {\n    this.props.setActiveRats(this.state.selectedRats);\n    this.props.advanceState();\n  }\n\n  render() {\n    let ratsList = []\n    // Create a clickable div for every rat in the game\n    for (let i = 0; i < this.activeRats.length; i++) {\n      ratsList.push(\n        <div key={i} id={`rat${i}`} className=\"ratList\" onClick={() => {\n            this.selectRat(this.activeRats[i].name, `rat${i}`);\n          }}>\n          {`${this.activeRats[i].name}`}\n        </div>\n      )\n    }\n    return (\n      <div id=\"roseCeremonyScreen\">\n        Rose ceremony: Select {`${this.props.numRoses}`} rats\n        {ratsList}\n        <div>Chosen: {this.state.selectedRats.join(\",\")}</div>\n        {this.state.giveRosesButton}\n    </div>\n    );\n  }\n}\n\nexport default RoseCeremony;\n\n","import React from \"react\";\n\n\nclass AnimeEnding extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id=\"animeEndingScreen\">\n        You chose {`${this.props.finalRat.name}`}:\n        <br/>\n        {this.props.finalRat.dialogue[this.props.finalRat.dialogue.length - 1]}\n        <button onClick={this.props.restartGame}>Restart Game</button>\n    </div>\n    );\n  }\n}\n\nexport default AnimeEnding;\n\n","import \"./App.css\";\nimport React from \"react\";\nimport IntroScreen from \"./components/IntroScreen\";\nimport RatSelect from \"./components/RatSelect\";\nimport TalkingToRats from \"./components/TalkingToRats\";\nimport RoseCeremony from \"./components/RoseCeremony\";\nimport AnimeEnding from \"./components/AnimeEnding\";\n\nimport ratsJson from './rats.json';\n\n// Game Stages\nconst INTRO = 0;\nconst RAT_SELECT = 1;\nconst TALKING_TO_RATS = 2;\nconst ROSE_CEREMONY = 3;\nconst ANIME_ENDING = 4;\nconst SPECIAL_ENDING = 5;\n\nclass RatchelorGame extends React.Component {\n  constructor() {\n    super();\n    // Num rats the person should select at the very beginning\n    this.numRatsInGame = 6;\n    // How many rounds there are\n    this.numRounds = 5;\n    // How many roses get given out each round\n    this.rosesPerRound = [5, 4, 3, 2, 1];\n    this.state = {\n      // What phase of the game we're in\n      gameStage: INTRO,\n      // What round of the rose-talking loop we're on\n      roundNum: 0,\n      // String list of all rat names currently still in the game\n      activeRatNames: [],\n    };\n  }\n\n  // Reset everything to restart the game\n  restartGame() {\n    this.setState({\n      gameStage: INTRO,\n      roundNum: 0,\n      activeRatNames: []\n    })\n  }\n\n  // Takes a string rat name and returns the Json object with additional details\n  getRatByName(name) {\n    for (let i = 0; i < ratsJson.length; i++) {\n      if (ratsJson[i].name === name) {\n        return ratsJson[i];\n      }\n    }\n  }\n\n  render() {\n    if (this.state.gameStage === INTRO) {\n      // Intro screen: advances to next stage when complete\n      return (\n        <IntroScreen onClick={() => {this.setState({gameStage: RAT_SELECT})}}/> \n      );\n    } else if (this.state.gameStage === RAT_SELECT) {\n      // Rat select screen: \n      //    modifies the currently active rat names\n      //    advances to the next stage when complete\n      return (\n        <RatSelect \n          rats={ratsJson} \n          numRatsInGame={this.numRatsInGame} \n          advanceState={() => this.setState({gameStage: TALKING_TO_RATS})}\n          setActiveRats={(selectedRats) => {this.setState({activeRatNames: selectedRats});}}\n          />\n      )\n    } else if (this.state.gameStage === TALKING_TO_RATS) {\n      // Talking to rats screen:\n      //    advances to the rose ceremony when done\n      return (\n        <TalkingToRats\n          activeRatNames={this.state.activeRatNames}\n          getRatByName={this.getRatByName}\n          round={this.state.roundNum}\n          goToRoseCeremony={() => this.setState({gameStage: ROSE_CEREMONY})}\n        />\n      )\n    } else if (this.state.gameStage === ROSE_CEREMONY) {\n      // Rose ceremony screen:\n      //    either advances to the next talking round, or advances to the anime ending\n      //    modifies the currently active rat names\n      return (\n        <RoseCeremony\n          activeRatNames={this.state.activeRatNames}\n          getRatByName={this.getRatByName}\n          numRoses={this.rosesPerRound[this.state.roundNum]}\n          setActiveRats={(selectedRats) => {this.setState({activeRatNames: selectedRats});}}\n          advanceState={() => {\n            // Update the current round number\n            const newRoundNum = this.state.roundNum + 1;\n            // If that was the last round, advance to Anime\n            if (newRoundNum === this.numRounds) {\n              this.setState({gameStage: ANIME_ENDING});\n            // Else, keep talking to rats\n            } else {\n              this.setState({gameStage: TALKING_TO_RATS, roundNum: newRoundNum})\n            }\n          }}\n        />\n      )\n    } else if (this.state.gameStage === ANIME_ENDING) {\n      // Anime ending screen:\n      //    allows game to be restarted\n      return (\n        <AnimeEnding\n          finalRat={this.getRatByName(this.state.activeRatNames[0])}\n          restartGame={this.restartGame.bind(this)}\n        />\n      )\n    }\n  }\n}\n\n\n\nexport default RatchelorGame;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}