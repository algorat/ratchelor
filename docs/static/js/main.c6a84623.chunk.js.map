{"version":3,"sources":["components/IntroScreen.js","components/RatSelect.js","components/TalkingToRats.js","components/RoseCeremony.js","components/AnimeEnding.js","App.js","index.js"],"names":["IntroScreen","id","onClick","this","props","React","Component","RatSelect","onClickSelectRats","setActiveRats","state","selectedRats","advanceState","selectRatsButton","ratName","element","document","getElementById","indexOf","index","newSelectedRats","splice","setState","classList","remove","length","numRatsInGame","push","add","ratsList","i","className","selectRat","rats","name","join","TalkingToRats","ratNames","activeRatNames","sort","a","b","Math","random","activeRats","map","getRatByName","responses","responsesJson","ratIndex","newRatIndex","goToRoseCeremony","responseText","responseDiv","submitResponse","bind","getRandomResponses","ratDialogue","dialogue","round","RoseCeremony","numRoses","giveRosesButton","endRoseCeremony","AnimeEnding","finalRat","restartGame","RatchelorGame","numRounds","rosesPerRound","gameStage","roundNum","ratsJson","newRoundNum","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c6a84623.chunk.js","sourcesContent":["import React from \"react\";\n\nclass IntroScreen extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div id=\"introScreen\">\n        <h1>This is the intro screen!</h1>\n        <button onClick={this.props.onClick}>Start Game</button>\n    </div>\n    );\n  }\n}\n\nexport default IntroScreen;\n\n","import React from \"react\";\nimport { Row, Box } from \"jsxstyle\";\n\n\nclass RatSelect extends React.Component {\n  constructor() {\n    super();\n\n    // Once you've select the rats, advance to the next stage\n    this.onClickSelectRats = () => {\n      this.props.setActiveRats(this.state.selectedRats);\n      this.props.advanceState();\n    }\n\n    this.state = {\n      selectedRats: [],\n      selectRatsButton: \"\"\n    }\n  }\n\n  // When a rat is clicked\n  selectRat(ratName, id) {\n    // Get the element for the current rat button\n    const element = document.getElementById(id);\n\n    // If it's already chosen, deselect it\n    if (this.state.selectedRats.indexOf(ratName) != -1) {\n      const index = this.state.selectedRats.indexOf(ratName);\n      const newSelectedRats = this.state.selectedRats;\n      newSelectedRats.splice(index, 1);\n      this.setState({selectedRats: newSelectedRats});\n      element.classList.remove(\"selectedRat\");\n      this.setState({selectRatsButton: \"\"})\n      return;\n    }\n\n    // If you've already selected the max rats, you can't select another\n    if (this.state.selectedRats.length === this.props.numRatsInGame) {\n      return;\n    }\n\n    // Otherwise, select this rat\n    let newSelectedRats = this.state.selectedRats;\n    newSelectedRats.push(ratName);\n    element.classList.add(\"selectedRat\");\n\n    // If that was the final rat, display the advance button\n    if (this.state.selectedRats.length === this.props.numRatsInGame) {\n      let selectRatsButton = <button onClick={this.onClickSelectRats}>Select Rats</button>\n      this.setState({selectRatsButton});\n    } else {\n      this.setState({selectRatsButton: \"\"});\n    }\n\n    // Force a UI update for the rat list\n    this.setState({});\n  }\n\n  render() {\n    let ratsList = []\n    // Create a clickable div for every rat in the game\n    for (let i = 0; i < this.props.rats.length; i++) {\n      ratsList.push(\n        <div key={i} id={`rat${i}`} className=\"ratList\" onClick={() => {\n            this.selectRat(this.props.rats[i].name, `rat${i}`);\n          }}>\n          {`${this.props.rats[i].name}`}\n        </div>\n      )\n    }\n    \n    return (\n      <div id=\"ratSelectScreen\">\n        <div>Select your rats for the game (choose {`${this.props.numRatsInGame}`}):</div>\n        {ratsList}\n        <div>Chosen: {this.state.selectedRats.join(\",\")}</div>\n        {this.state.selectRatsButton}\n    </div>\n    );\n  }\n}\n\nexport default RatSelect;\n\n","import React from \"react\";\nimport responsesJson from '../responses.json';\n\n\nclass TalkingToRats extends React.Component {\n  constructor(props) {\n    super(props);\n    // Randomly shuffle the rats for this round\n    this.ratNames = props.activeRatNames.sort(function (a, b) { return 0.5 - Math.random() })\n    // Get all of the round's rats based on their names\n    this.activeRats = this.ratNames.map((ratName) => this.props.getRatByName(ratName));\n    // Store all of your canned responses in an array\n    this.responses = responsesJson;\n\n    this.state = {\n      ratIndex: 0,\n    }\n  }\n\n  // After you submit your response, choose a new rat\n  submitResponse() {\n    let newRatIndex = this.state.ratIndex + 1;\n    // If that was the last rat, advance to the rose ceremony\n    if (newRatIndex === this.ratNames.length) {\n      this.props.goToRoseCeremony();\n    } else {\n      this.setState ({ratIndex: newRatIndex})\n    }\n  }\n\n  getRandomResponses() {\n    // Make sure we get random, different responses\n    const numResponses = 3;\n    // Shuffle all responses\n    responsesJson.sort( () => .5 - Math.random() )\n    let responses = [];\n    // Choose the first n\n    for (let i = 0; i < numResponses; i++) {\n      let responseText = responsesJson[i]\n      let responseDiv = <button onClick={this.submitResponse.bind(this)} key={i}>{responseText}</button>\n      responses.push(responseDiv);\n    }\n    return responses;\n  }\n\n  // You get a random rat, they talk to you, you can respond, after you respond another rat shows up\n  render() {\n    let responses = this.getRandomResponses();\n    let ratDialogue = this.activeRats[this.state.ratIndex].dialogue[this.props.round];\n    return (\n      <div id=\"talkingToRatsScreen\">\n        talking to rat #{`${this.state.ratIndex + 1}`} out of {`${this.ratNames.length}`}<br/>\n      <div id=\"ratName\">{this.activeRats[this.state.ratIndex].name}:</div>\n      <br/>\n      {ratDialogue}\n      {responses}\n    </div>\n    );\n  }\n}\n\nexport default TalkingToRats;\n\n","import React from \"react\";\n\nclass RoseCeremony extends React.Component {\n  constructor(props) {\n    super(props);\n    // Randomly shuffle the rats for this round\n    this.ratNames = props.activeRatNames.sort(function (a, b) { return 0.5 - Math.random() })\n    // Get all of the round's rats based on their names\n    this.activeRats = this.ratNames.map((ratName) => this.props.getRatByName(ratName));\n    // How many roses you have to give out\n    this.numRoses = this.props.numRoses;\n\n    this.state = {\n      selectedRats: [],\n      giveRosesButton: \"\"\n    }\n  }\n\n  // When a rat is clicked\n  selectRat(ratName, id) {\n    // Get the element for the current rat button\n    const element = document.getElementById(id);\n\n    // If it's already chosen, deselect it\n    if (this.state.selectedRats.indexOf(ratName) != -1) {\n      const index = this.state.selectedRats.indexOf(ratName);\n      const newSelectedRats = this.state.selectedRats;\n      newSelectedRats.splice(index, 1);\n      this.setState({selectedRats: newSelectedRats});\n      element.classList.remove(\"selectedRat\");\n      this.setState({giveRosesButton: \"\"})\n      return;\n    }\n\n    // If you've already selected the max rats, you can't select another\n    if (this.state.selectedRats.length === this.numRoses) {\n      return;\n    }\n\n    // Otherwise, select this rat\n    let newSelectedRats = this.state.selectedRats;\n    newSelectedRats.push(ratName);\n    element.classList.add(\"selectedRat\");\n\n    // If that was the final rat, display the advance button\n    if (this.state.selectedRats.length === this.numRoses) {\n      let giveRosesButton = <button onClick={this.endRoseCeremony.bind(this)}>Give roses</button>\n        this.setState({giveRosesButton})\n    } else {\n      this.setState({giveRosesButton: \"\"});\n    }\n\n    // Force a UI update for the rat list\n    this.setState({});\n  }\n\n  endRoseCeremony() {\n    this.props.setActiveRats(this.state.selectedRats);\n    this.props.advanceState();\n  }\n\n  render() {\n    let ratsList = []\n    // Create a clickable div for every rat in the game\n    for (let i = 0; i < this.activeRats.length; i++) {\n      ratsList.push(\n        <div key={i} id={`rat${i}`} className=\"ratList\" onClick={() => {\n            this.selectRat(this.activeRats[i].name, `rat${i}`);\n          }}>\n          {`${this.activeRats[i].name}`}\n        </div>\n      )\n    }\n    return (\n      <div id=\"roseCeremonyScreen\">\n        Rose ceremony: Select {`${this.props.numRoses}`} rats\n        {ratsList}\n        <div>Chosen: {this.state.selectedRats.join(\",\")}</div>\n        {this.state.giveRosesButton}\n    </div>\n    );\n  }\n}\n\nexport default RoseCeremony;\n\n","import React from \"react\";\n\n\nclass AnimeEnding extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id=\"animeEndingScreen\">\n        You chose {`${this.props.finalRat.name}`}:\n        <br/>\n        {this.props.finalRat.dialogue[this.props.finalRat.dialogue.length - 1]}\n        <button onClick={this.props.restartGame}>Restart Game</button>\n    </div>\n    );\n  }\n}\n\nexport default AnimeEnding;\n\n","import \"./App.css\";\nimport React from \"react\";\nimport IntroScreen from \"./components/IntroScreen\";\nimport RatSelect from \"./components/RatSelect\";\nimport TalkingToRats from \"./components/TalkingToRats\";\nimport RoseCeremony from \"./components/RoseCeremony\";\nimport AnimeEnding from \"./components/AnimeEnding\";\n\nimport ratsJson from './rats.json';\n\n// Game Stages\nconst INTRO = 0;\nconst RAT_SELECT = 1;\nconst TALKING_TO_RATS = 2;\nconst ROSE_CEREMONY = 3;\nconst ANIME_ENDING = 4;\nconst SPECIAL_ENDING = 5;\n\nclass RatchelorGame extends React.Component {\n  constructor() {\n    super();\n    // Num rats the person should select at the very beginning\n    this.numRatsInGame = 6;\n    // How many rounds there are\n    this.numRounds = 5;\n    // How many roses get given out each round\n    this.rosesPerRound = [5, 4, 3, 2, 1];\n    this.state = {\n      // What phase of the game we're in\n      gameStage: INTRO,\n      // What round of the rose-talking loop we're on\n      roundNum: 0,\n      // String list of all rat names currently still in the game\n      activeRatNames: [],\n    };\n  }\n\n  // Reset everything to restart the game\n  restartGame() {\n    this.setState({\n      gameStage: INTRO,\n      roundNum: 0,\n      activeRatNames: []\n    })\n  }\n\n  // Takes a string rat name and returns the Json object with additional details\n  getRatByName(name) {\n    for (let i = 0; i < ratsJson.length; i++) {\n      if (ratsJson[i].name === name) {\n        return ratsJson[i];\n      }\n    }\n  }\n\n  render() {\n    if (this.state.gameStage === INTRO) {\n      // Intro screen: advances to next stage when complete\n      return (\n        <IntroScreen onClick={() => {this.setState({gameStage: RAT_SELECT})}}/> \n      );\n    } else if (this.state.gameStage === RAT_SELECT) {\n      // Rat select screen: \n      //    modifies the currently active rat names\n      //    advances to the next stage when complete\n      return (\n        <RatSelect \n          rats={ratsJson} \n          numRatsInGame={this.numRatsInGame} \n          advanceState={() => this.setState({gameStage: TALKING_TO_RATS})}\n          setActiveRats={(selectedRats) => {this.setState({activeRatNames: selectedRats});}}\n          />\n      )\n    } else if (this.state.gameStage === TALKING_TO_RATS) {\n      // Talking to rats screen:\n      //    advances to the rose ceremony when done\n      return (\n        <TalkingToRats\n          activeRatNames={this.state.activeRatNames}\n          getRatByName={this.getRatByName}\n          round={this.state.roundNum}\n          goToRoseCeremony={() => this.setState({gameStage: ROSE_CEREMONY})}\n        />\n      )\n    } else if (this.state.gameStage === ROSE_CEREMONY) {\n      // Rose ceremony screen:\n      //    either advances to the next talking round, or advances to the anime ending\n      //    modifies the currently active rat names\n      return (\n        <RoseCeremony\n          activeRatNames={this.state.activeRatNames}\n          getRatByName={this.getRatByName}\n          numRoses={this.rosesPerRound[this.state.roundNum]}\n          setActiveRats={(selectedRats) => {this.setState({activeRatNames: selectedRats});}}\n          advanceState={() => {\n            // Update the current round number\n            const newRoundNum = this.state.roundNum + 1;\n            // If that was the last round, advance to Anime\n            if (newRoundNum === this.numRounds) {\n              this.setState({gameStage: ANIME_ENDING});\n            // Else, keep talking to rats\n            } else {\n              this.setState({gameStage: TALKING_TO_RATS, roundNum: newRoundNum})\n            }\n          }}\n        />\n      )\n    } else if (this.state.gameStage === ANIME_ENDING) {\n      // Anime ending screen:\n      //    allows game to be restarted\n      return (\n        <AnimeEnding\n          finalRat={this.getRatByName(this.state.activeRatNames[0])}\n          restartGame={this.restartGame.bind(this)}\n        />\n      )\n    }\n  }\n}\n\n\n\nexport default RatchelorGame;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}