{"version":3,"sources":["components/IntroScreen.js","components/RatSelect.js","components/TalkingToRats.js","components/RoseCeremony.js","components/AnimeEnding.js","App.js","index.js"],"names":["IntroScreen","props","state","opacity","this","fadeInterval","window","setInterval","onClick","clearInterval","setState","id","className","style","bind","React","Component","RatSelect","onClickSelectRats","setActiveRats","selectedRats","advanceState","selectRatsButton","ratName","element","document","getElementById","indexOf","length","numRatsInGame","push","classList","add","index","newSelectedRats","splice","remove","ratsList","i","filename","rats","filenameHearts","selectRat","name","src","tagline","OFF_BOTTOM","TalkingToRats","ratNames","activeRatNames","sort","a","b","Math","random","activeRats","map","getRatByName","responses","responsesJson","charSpeed","ratMoveSpeed","ratIndex","charsRevealed","ratLeft","ratTop","dialogueBottom","incr","sendRatIn","getRandomResponses","ratMoveOutInterval","ratMoveInInterval","startTextMoving","setNextRat","textInterval","dialogue","round","newRatIndex","goToRoseCeremony","sendRatOut","responseText","responseDiv","submitResponse","ratDialogue","substring","left","top","bottom","RoseCeremony","numRoses","giveRosesButton","endRoseCeremony","roseContainer","AnimeEnding","finalRat","restartGame","RatchelorGame","numRounds","rosesPerRound","gameStage","roundNum","interludeText","ratsJson","screen","newRoundNum","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.135c6f63.chunk.js","sourcesContent":["import React from \"react\";\n\nclass IntroScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      opacity: 1,\n    }\n  }\n\n  onClick() {\n    this.fadeInterval = window.setInterval(() => {\n      let opacity = this.state.opacity - 0.01;\n      if (opacity <= 0) {\n        this.props.onClick();\n        window.clearInterval(this.fadeInterval);\n      } else {\n        this.setState({opacity});\n      }\n    }, 5);\n  }\n\n  render() {\n    return (\n      <div id=\"introScreen\" className=\"screen\" style={{opacity: this.state.opacity}}>\n        <button onClick={this.onClick.bind(this)}>Embark</button>\n        <div id=\"hideme\"/>\n    </div>\n    );\n  }\n}\n\nexport default IntroScreen;\n\n","import React from \"react\";\n\nclass RatSelect extends React.Component {\n  constructor() {\n    super();\n\n    // Once you've select the rats, advance to the next stage\n    this.onClickSelectRats = () => {\n      this.props.setActiveRats(this.state.selectedRats);\n      this.props.advanceState();\n    }\n\n    this.state = {\n      selectedRats: [],\n      selectRatsButton: <div id=\"chooseText\">Select your 7 contestants</div>\n    }\n  }\n\n  // When a rat is clicked\n  selectRat(ratName, id) {\n    // Get the element for the current rat button\n    const element = document.getElementById(id);\n\n    // If it's already chosen, deselect it\n    if (this.state.selectedRats.indexOf(ratName) !== -1) {\n      const index = this.state.selectedRats.indexOf(ratName);\n      const newSelectedRats = this.state.selectedRats;\n      newSelectedRats.splice(index, 1);\n      this.setState({selectedRats: newSelectedRats});\n      element.classList.remove(\"selectedRat\");\n      if (this.state.selectedRats.length !== this.props.numRatsInGame - 1) {\n        let selectRatsButton = <div id=\"chooseText\">{`Select ${this.props.numRatsInGame - this.state.selectedRats.length} more contestants`}</div>\n        this.setState({selectRatsButton});\n      } else {\n        let selectRatsButton = <div id=\"chooseText\">{`Select ${this.props.numRatsInGame - this.state.selectedRats.length} more contestant`}</div>\n        this.setState({selectRatsButton});\n      }\n      return;\n    }\n\n    // If you've already selected the max rats, you can't select another\n    if (this.state.selectedRats.length === this.props.numRatsInGame) {\n      return;\n    }\n\n    // Otherwise, select this rat\n    let newSelectedRats = this.state.selectedRats;\n    newSelectedRats.push(ratName);\n    element.classList.add(\"selectedRat\");\n\n    // If that was the final rat, display the advance button\n    if (this.state.selectedRats.length === this.props.numRatsInGame) {\n      let selectRatsButton = <div id=\"chooseText\"><button onClick={this.onClickSelectRats}>Continue</button></div>\n      this.setState({selectRatsButton});\n    } else if (this.state.selectedRats.length !== this.props.numRatsInGame - 1) {\n      let selectRatsButton = <div id=\"chooseText\">{`Select ${this.props.numRatsInGame - this.state.selectedRats.length} more contestants`}</div>\n      this.setState({selectRatsButton});\n    } else {\n      let selectRatsButton = <div id=\"chooseText\">{`Select ${this.props.numRatsInGame - this.state.selectedRats.length} more contestant`}</div>\n      this.setState({selectRatsButton});\n    }\n\n    // Force a UI update for the rat list\n\n    this.setState({});\n  }\n\n  render() {\n    let ratsList = []\n    // Create a clickable div for every rat in the game\n    for (let i = 0; i < this.props.rats.length; i++) {\n      let filename = `/ratchelor/img/Frames/${this.props.rats[i].filename}.PNG`\n      let filenameHearts = `/ratchelor/img/Frames/hearts${(i  % 9) + 1}.PNG`\n      ratsList.push(\n        <div key={i} id=\"ratContainer\">\n          <div  id={`rat${i}`} className=\"ratListItem\" onClick={() => {\n            this.selectRat(this.props.rats[i].name, `rat${i}`);\n          }}>\n          <div className=\"ratPic\">\n            <img className=\"ratFrame\" src={filename}/>\n            <img className=\"ratHearts\" src={filenameHearts}/>\n          </div>\n          <div className=\"ratNameContainer\">\n          <div className=\"ratName\">{`${this.props.rats[i].name}`}</div>\n          <div className=\"ratTagline\">{`\"${this.props.rats[i].tagline}\"`}</div>\n          </div>\n        </div>\n        </div>\n      )\n    }\n    \n    return (\n      <div id=\"ratSelectScreen\" className=\"screen\">\n                {this.state.selectRatsButton}\n        <div id=\"ratListContainer\">{ratsList}</div>\n\n    </div>\n    );\n  }\n}\n\nexport default RatSelect;\n\n","import React from \"react\";\nimport responsesJson from '../responses.json';\n\nconst OFF_LEFT = -450;\nconst OFF_BOTTOM = -400;\nclass TalkingToRats extends React.Component {\n  constructor(props) {\n    super(props);\n    // Randomly shuffle the rats for this round\n    this.ratNames = props.activeRatNames.sort(function (a, b) { return 0.5 - Math.random() })\n    // Get all of the round's rats based on their names\n    this.activeRats = this.ratNames.map((ratName) => this.props.getRatByName(ratName));\n    // Store all of your canned responses in an array\n    this.responses = responsesJson;\n    this.charSpeed = 30;\n    this.ratMoveSpeed = 10;\n    this.state = {\n      ratIndex: 0,\n      charsRevealed: 0,\n      responses: [],\n      ratLeft: OFF_LEFT,\n      ratTop: 0,\n      dialogueBottom: OFF_BOTTOM,\n      incr: 1\n    }\n  }\n\n  componentDidMount() {\n    this.sendRatIn();\n   \n  }\n\n sendRatIn() {\n  this.getRandomResponses();\n  this.setState({incr: 25})\n  window.clearInterval(this.ratMoveOutInterval);\n    this.ratMoveInInterval = window.setInterval(() => {\n      if (this.state.ratLeft < 0) {\n        this.setState({ratLeft: this.state.ratLeft + this.state.incr})\n        if (this.state.dialogueBottom < 0) {\n          let dialogueBottom = this.state.dialogueBottom + this.state.incr;\n          if (dialogueBottom > 0) dialogueBottom = 0;\n          this.setState({incr: this.state.incr * 0.95});\n          this.setState({dialogueBottom})\n        }\n      } else {\n        window.clearInterval(this.ratMoveInInterval);\n        this.startTextMoving();\n      }\n    }, this.ratMoveSpeed);\n  }\n\n  sendRatOut() {\n    window.clearInterval(this.ratMoveInInterval);\n    this.setState({responses: \"\", incr: 1})\n    this.ratMoveOutInterval = window.setInterval(() => {\n      if (this.state.ratLeft > OFF_LEFT) {\n        this.setState({ratLeft: this.state.ratLeft - this.state.incr})\n        if (this.state.dialogueBottom > OFF_BOTTOM) {\n          let dialogueBottom = this.state.dialogueBottom - this.state.incr;\n          if (dialogueBottom < OFF_BOTTOM) dialogueBottom = OFF_BOTTOM;\n          this.setState({dialogueBottom})\n          this.setState({incr: this.state.incr * 1.05});\n        }\n      } else {\n        window.clearInterval(this.ratMoveOutInterval);\n        this.setState({charsRevealed: 0})\n        this.setNextRat();\n      }\n    }, this.ratMoveSpeed);\n  }\n\n  startTextMoving() {\n    this.setState({charsRevealed: 0});\n    this.textInterval = window.setInterval(() => {\n      let charsRevealed = this.state.charsRevealed + 1;\n      if (charsRevealed > this.activeRats[this.state.ratIndex].dialogue[this.props.round].length) {\n      } else {\n        this.setState({charsRevealed})\n      }\n    }, this.charSpeed)\n  }\n\n  setNextRat() {\n    let newRatIndex = this.state.ratIndex + 1;\n    // If that was the last rat, advance to the rose ceremony\n    if (newRatIndex === this.ratNames.length) {\n      this.props.goToRoseCeremony();\n    } else {\n      this.setState ({ratIndex: newRatIndex})\n    }\n    this.sendRatIn();\n  }\n\n  // After you submit your response, choose a new rat\n  submitResponse() {\n    window.clearInterval(this.textInterval)\n    this.sendRatOut();\n  }\n\n  getRandomResponses() {\n    // Make sure we get random, different responses\n    const numResponses = 3;\n    // Shuffle all responses\n    responsesJson.sort( () => .5 - Math.random() )\n    let responses = [];\n    // Choose the first n\n    for (let i = 0; i < numResponses; i++) {\n      let responseText = responsesJson[i]\n      let responseDiv = <button onClick={this.submitResponse.bind(this)} key={i}>{responseText}</button>\n      responses.push(responseDiv);\n    }\n    this.setState({responses});\n  }\n\n  // You get a random rat, they talk to you, you can respond, after you respond another rat shows up\n  render() {\n    let ratDialogue = this.activeRats[this.state.ratIndex].dialogue[this.props.round].substring(0, this.state.charsRevealed);\n    if (ratDialogue.length === 0) ratDialogue = \"...\";\n    return (\n      <div id=\"talkingToRatsScreen\" className=\"screen\">\n      <img id=\"playerRat\" \n      src={`/ratchelor/img/Couch/you.png`}></img>\n      <img id=\"talkingRat\" \n      style={{left: `${this.state.ratLeft}px`, top: `${this.state.ratTop}px`}}\n      src={`/ratchelor/img/Couch/${this.activeRats[this.state.ratIndex].filename}.png`}></img>\n      <div id=\"dialogueContainer\" style={{bottom: `${this.state.dialogueBottom}px`}}>\n        <div id=\"ratName\">{this.activeRats[this.state.ratIndex].name}</div>\n        <div id=\"ratDialogue\">{ratDialogue}</div>\n      </div>\n      <div id=\"responses\" style={{bottom: `${this.state.dialogueBottom + 10}px`}}>{this.state.responses}</div>\n    </div>\n    );\n  }\n}\n\nexport default TalkingToRats;\n\n","import React from \"react\";\n\nclass RoseCeremony extends React.Component {\n  constructor(props) {\n    super(props);\n    // Randomly shuffle the rats for this round\n    this.ratNames = props.activeRatNames.sort(function (a, b) { return 0.5 - Math.random() })\n    // Get all of the round's rats based on their names\n    this.activeRats = this.ratNames.map((ratName) => this.props.getRatByName(ratName));\n    // How many roses you have to give out\n    this.numRoses = this.props.numRoses;\n\n    this.state = {\n      selectedRats: [],\n      giveRosesButton: \"\"\n    }\n  }\n\n  // When a rat is clicked\n  selectRat(ratName, id) {\n    // Get the element for the current rat button\n    const element = document.getElementById(id);\n\n    // If it's already chosen, deselect it\n    if (this.state.selectedRats.indexOf(ratName) != -1) {\n      const index = this.state.selectedRats.indexOf(ratName);\n      const newSelectedRats = this.state.selectedRats;\n      newSelectedRats.splice(index, 1);\n      this.setState({selectedRats: newSelectedRats});\n      element.classList.remove(\"selectedRat\");\n      this.setState({giveRosesButton: \"\"})\n      return;\n    }\n\n    // If you've already selected the max rats, you can't select another\n    if (this.state.selectedRats.length === this.numRoses) {\n      return;\n    }\n\n    // Otherwise, select this rat\n    let newSelectedRats = this.state.selectedRats;\n    newSelectedRats.push(ratName);\n    element.classList.add(\"selectedRat\");\n\n    // If that was the final rat, display the advance button\n    if (this.state.selectedRats.length === this.numRoses) {\n      let giveRosesButton;\n      if (this.numRoses == 1){\n        giveRosesButton = <button onClick={this.endRoseCeremony.bind(this)}>Choose Contestant</button>;\n      }\n      else{\n        giveRosesButton = <button onClick={this.endRoseCeremony.bind(this)}>Choose Contestants</button>;\n      }\n      this.setState({giveRosesButton});\n      \n    } else {\n      this.setState({giveRosesButton: \"\"});\n    }\n\n    // Force a UI update for the rat list\n    this.setState({});\n  }\n\n  endRoseCeremony() {\n    this.props.setActiveRats(this.state.selectedRats);\n    this.props.advanceState();\n  }\n\n  render() {\n    let ratsList = []\n    // Create a clickable div for every rat in the game\n    for (let i = 0; i < this.activeRats.length; i++) {\n      let filename = `/ratchelor/img/Characters/${this.activeRats[i].filename}.png`\n      ratsList.push(\n        <div key={i} id={`rat${i}`} className=\"ratList\" onClick={() => {\n            this.selectRat(this.activeRats[i].name, `rat${i}`);\n          }}>\n          {/* {`${this.activeRats[i].name}`} */}\n          <img className=\"ratPic\" src={filename}/>\n          <img className=\"rosePic\" src=\"/ratchelor/img/temprose.png\"/>\n        </div>\n      )\n    }\n    let roseContainer = []\n    for (let i = 0; i < this.props.numRoses - this.state.selectedRats.length; i++) {\n      roseContainer.push(<img className=\"roseIcon\" src=\"/ratchelor/img/temprose.png\"></img>)\n    }\n    return (\n      <div id=\"roseCeremonyScreen\" className=\"screen\">\n        <div id=\"roseContainer\">{roseContainer}</div>\n        <div id=\"ratListContainer\"> {ratsList}</div>\n        <div id=\"giveRosesButton\"> {this.state.giveRosesButton}</div>\n    </div>\n    );\n  }\n}\n\nexport default RoseCeremony;\n\n","import React from \"react\";\n\n\nclass AnimeEnding extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id=\"animeEndingScreen\" className=\"screen\">\n        <img id=\"animePic\" src={`/ratchelor/img/Anime/${this.props.finalRat.filename}.jpg`}></img>\n        <div id=\"animeText\"> {this.props.finalRat.dialogue[this.props.finalRat.dialogue.length - 1]}</div>\n        <button id=\"restartButton\" onClick={this.props.restartGame}>Restart?</button>\n    </div>\n    );\n  }\n}\n\nexport default AnimeEnding;\n\n","import \"./App.css\";\nimport React from \"react\";\nimport IntroScreen from \"./components/IntroScreen\";\nimport RatSelect from \"./components/RatSelect\";\nimport TalkingToRats from \"./components/TalkingToRats\";\nimport RoseCeremony from \"./components/RoseCeremony\";\nimport AnimeEnding from \"./components/AnimeEnding\";\n\nimport ratsJson from './rats.json';\n\n// Game Stages\nconst INTRO = 0;\nconst RAT_SELECT = 1;\nconst TALKING_TO_RATS = 2;\nconst ROSE_CEREMONY = 3;\nconst ANIME_ENDING = 4;\nconst SPECIAL_ENDING = 5;\n\nclass RatchelorGame extends React.Component {\n  constructor() {\n    super();\n    // Num rats the person should select at the very beginning\n    this.numRatsInGame = 7;\n    // How many rounds there are\n    this.numRounds = 5;\n    // How many roses get given out each round\n    this.rosesPerRound = [5, 4, 3, 2, 1];\n    this.state = {\n      // What phase of the game we're in\n      gameStage: INTRO,\n      // What round of the rose-talking loop we're on\n      roundNum: 0,\n      // String list of all rat names currently still in the game\n      activeRatNames: [],\n      // Text for interlude screens that fall down\n      interludeText: \"Round 1\"\n    };\n  }\n\n  // Reset everything to restart the game\n  restartGame() {\n    this.setState({\n      gameStage: INTRO,\n      roundNum: 0,\n      activeRatNames: []\n    })\n  }\n\n  // Takes a string rat name and returns the Json object with additional details\n  getRatByName(name) {\n    for (let i = 0; i < ratsJson.length; i++) {\n      if (ratsJson[i].name === name) {\n        return ratsJson[i];\n      }\n    }\n  }\n\n  render() {\n    let screen = \"\";\n    if (this.state.gameStage === INTRO) {\n      // Intro screen: advances to next stage when complete\n      screen = <IntroScreen onClick={() => {this.setState({gameStage: RAT_SELECT})}}/> \n\n    } else if (this.state.gameStage === RAT_SELECT) {\n      // Rat select screen: \n      //    modifies the currently active rat names\n      //    advances to the next stage when complete\n      screen = <RatSelect \n          rats={ratsJson} \n          numRatsInGame={this.numRatsInGame} \n          advanceState={() => this.setState({gameStage: TALKING_TO_RATS})}\n          setActiveRats={(selectedRats) => {this.setState({activeRatNames: selectedRats});}}\n          />\n    } else if (this.state.gameStage === TALKING_TO_RATS) {\n      // Talking to rats screen:\n      //    advances to the rose ceremony when done\n      screen = <TalkingToRats\n          activeRatNames={this.state.activeRatNames}\n          getRatByName={this.getRatByName}\n          round={this.state.roundNum}\n          goToRoseCeremony={() => this.setState({gameStage: ROSE_CEREMONY})}\n        />\n    } else if (this.state.gameStage === ROSE_CEREMONY) {\n      // Rose ceremony screen:\n      //    either advances to the next talking round, or advances to the anime ending\n      //    modifies the currently active rat names\n      screen = \n        <RoseCeremony\n          activeRatNames={this.state.activeRatNames}\n          getRatByName={this.getRatByName}\n          numRoses={this.rosesPerRound[this.state.roundNum]}\n          setActiveRats={(selectedRats) => {this.setState({activeRatNames: selectedRats});}}\n          advanceState={() => {\n            // Update the current round number\n            const newRoundNum = this.state.roundNum + 1;\n            // If that was the last round, advance to Anime\n            if (newRoundNum === this.numRounds) {\n              this.setState({gameStage: ANIME_ENDING});\n            // Else, keep talking to rats\n            } else {\n              this.setState({gameStage: TALKING_TO_RATS, roundNum: newRoundNum})\n            }\n          }}\n        />\n    } else if (this.state.gameStage === ANIME_ENDING) {\n      // Anime ending screen:\n      //    allows game to be restarted\n      screen = \n        <AnimeEnding\n          finalRat={this.getRatByName(this.state.activeRatNames[0])}\n          restartGame={this.restartGame.bind(this)}\n        />\n   \n    }\n    return (\n      <div id=\"game\">\n        <img id=\"frame\" src=\"/ratchelor/img/frameSmaller.png\"></img>\n        <div id=\"interludeContainer\">\n        <div id=\"interlude\">\n          <div id=\"interludeText\">{this.state.interludeText}</div>\n        </div>\n        {screen}\n        </div>\n\n       </div>\n    )\n  }\n}\n\n\n\nexport default RatchelorGame;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}