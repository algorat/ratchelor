{"version":3,"sources":["components/IntroScreen.js","components/RatSelect.js","components/TalkingToRats.js","components/RoseCeremony.js","components/AnimeEnding.js","App.js","index.js"],"names":["IntroScreen","props","state","opacity","this","fadeInterval","window","setInterval","onClick","clearInterval","setState","id","className","style","bind","React","Component","RatSelect","onClickSelectRats","setActiveRats","selectedRats","advanceState","selectRatsButton","document","getElementById","classList","remove","numRatsInGame","length","add","ratName","element","indexOf","index","newSelectedRats","splice","multiContestantsLeft","oneContestantLeft","push","noContestantsLeft","ratsList","i","filename","rats","filenameHearts","selectRat","name","src","tagline","OFF_BOTTOM","TalkingToRats","ratNames","activeRatNames","sort","a","b","Math","random","activeRats","map","getRatByName","responses","responsesJson","charSpeed","ratMoveSpeed","ratIndex","charsRevealed","ratLeft","ratTop","dialogueBottom","incr","sendRatIn","getRandomResponses","ratMoveOutInterval","ratMoveInInterval","startTextMoving","setNextRat","textInterval","dialogue","round","newRatIndex","goToRoseCeremony","sendRatOut","responseText","responseDiv","submitResponse","ratDialogue","substring","left","top","bottom","RoseCeremony","numRoses","giveRosesButton","endRoseCeremony","roseContainer","AnimeEnding","finalRat","restartGame","RatchelorGame","numRounds","rosesPerRound","gameStage","roundNum","interludeText","ratsJson","screen","newRoundNum","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2e903c95.chunk.js","sourcesContent":["import React from \"react\";\n\nclass IntroScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      opacity: 1,\n    }\n  }\n\n  onClick() {\n    this.fadeInterval = window.setInterval(() => {\n      let opacity = this.state.opacity - 0.01;\n      if (opacity <= 0) {\n        this.props.onClick();\n        window.clearInterval(this.fadeInterval);\n      } else {\n        this.setState({opacity});\n      }\n    }, 5);\n  }\n\n  render() {\n    return (\n      <div id=\"introScreen\" className=\"screen\" style={{opacity: this.state.opacity}}>\n        <button onClick={this.onClick.bind(this)}>Embark</button>\n        <div id=\"hideme\"/>\n    </div>\n    );\n  }\n}\n\nexport default IntroScreen;\n\n","import React from \"react\";\n\nclass RatSelect extends React.Component {\n  constructor() {\n    super();\n\n    // Once you've select the rats, advance to the next stage\n    this.onClickSelectRats = () => {\n      this.props.setActiveRats(this.state.selectedRats);\n      this.props.advanceState();\n    }\n\n    this.state = {\n      selectedRats: [],\n      selectRatsButton: <div id=\"chooseText\">Select your 7 contestants</div>\n    }\n  }\n\n  noContestantsLeft() {\n    let selectRatsButton = <div id=\"chooseText\"><button onClick={this.onClickSelectRats}>Continue</button></div>\n    this.setState({selectRatsButton});\n    document.getElementById(\"ratListContainer\").classList.remove(\"stillRats\");\n  }\n\n  oneContestantLeft() {\n    let selectRatsButton = <div id=\"chooseText\">{`Select ${this.props.numRatsInGame - this.state.selectedRats.length} more contestant`}</div>\n    this.setState({selectRatsButton});\n    document.getElementById(\"ratListContainer\").classList.add(\"stillRats\");\n  }\n\n  multiContestantsLeft() {\n    let selectRatsButton = <div id=\"chooseText\">{`Select ${this.props.numRatsInGame - this.state.selectedRats.length} more contestants`}</div>\n    this.setState({selectRatsButton});\n  }\n\n\n\n  // When a rat is clicked\n  selectRat(ratName, id) {\n    // Get the element for the current rat button\n    const element = document.getElementById(id);\n\n    // If it's already chosen, deselect it\n    if (this.state.selectedRats.indexOf(ratName) !== -1) {\n      const index = this.state.selectedRats.indexOf(ratName);\n      const newSelectedRats = this.state.selectedRats;\n      newSelectedRats.splice(index, 1);\n      this.setState({selectedRats: newSelectedRats});\n      element.classList.remove(\"selectedRat\");\n      if (this.state.selectedRats.length !== this.props.numRatsInGame - 1) {\n       this.multiContestantsLeft();\n      } else {\n        this.oneContestantLeft();\n      }\n      return;\n    }\n\n    // If you've already selected the max rats, you can't select another\n    if (this.state.selectedRats.length === this.props.numRatsInGame) {\n      return;\n    }\n\n    // Otherwise, select this rat\n    let newSelectedRats = this.state.selectedRats;\n    newSelectedRats.push(ratName);\n    element.classList.add(\"selectedRat\");\n\n    // If that was the final rat, display the advance button\n    if (this.state.selectedRats.length === this.props.numRatsInGame) {\n      this.noContestantsLeft();\n    } else if (this.state.selectedRats.length !== this.props.numRatsInGame - 1) {\n      this.multiContestantsLeft();\n    } else {\n      this.oneContestantLeft();\n    }\n\n    // Force a UI update for the rat list\n\n    this.setState({});\n  }\n\n  render() {\n    let ratsList = []\n    // Create a clickable div for every rat in the game\n    for (let i = 0; i < this.props.rats.length; i++) {\n      let filename = `/ratchelor/img/Frames/${this.props.rats[i].filename}.PNG`\n      let filenameHearts = `/ratchelor/img/Frames/hearts${(i  % 9) + 1}.PNG`\n      ratsList.push(\n        <div key={i} id=\"ratContainer\">\n          <div  id={`rat${i}`} className=\"ratListItem\" onClick={() => {\n            this.selectRat(this.props.rats[i].name, `rat${i}`);\n          }}>\n          <div className=\"ratPic\">\n            <img className=\"ratFrame\" src={filename}/>\n            <img className=\"ratHearts\" src={filenameHearts}/>\n          </div>\n          <div className=\"ratNameContainer\">\n          <div className=\"ratName\">{`${this.props.rats[i].name}`}</div>\n          <div className=\"ratTagline\">{`\"${this.props.rats[i].tagline}\"`}</div>\n          </div>\n        </div>\n        </div>\n      )\n    }\n    \n    return (\n      <div id=\"ratSelectScreen\" className=\"screen\">\n                {this.state.selectRatsButton}\n        <div id=\"ratListContainer\" className=\"stillRats\">{ratsList}</div>\n\n    </div>\n    );\n  }\n}\n\nexport default RatSelect;\n\n","import React from \"react\";\nimport responsesJson from '../responses.json';\n\nconst OFF_LEFT = -450;\nconst OFF_BOTTOM = -400;\nclass TalkingToRats extends React.Component {\n  constructor(props) {\n    super(props);\n    // Randomly shuffle the rats for this round\n    this.ratNames = props.activeRatNames.sort(function (a, b) { return 0.5 - Math.random() })\n    // Get all of the round's rats based on their names\n    this.activeRats = this.ratNames.map((ratName) => this.props.getRatByName(ratName));\n    // Store all of your canned responses in an array\n    this.responses = responsesJson;\n    this.charSpeed = 30;\n    this.ratMoveSpeed = 10;\n    this.state = {\n      ratIndex: 0,\n      charsRevealed: 0,\n      responses: [],\n      ratLeft: OFF_LEFT,\n      ratTop: 0,\n      dialogueBottom: OFF_BOTTOM,\n      incr: 1\n    }\n  }\n\n  componentDidMount() {\n    this.sendRatIn();\n   \n  }\n\n sendRatIn() {\n  this.getRandomResponses();\n  this.setState({incr: 25})\n  window.clearInterval(this.ratMoveOutInterval);\n    this.ratMoveInInterval = window.setInterval(() => {\n      if (this.state.ratLeft < 0) {\n        this.setState({ratLeft: this.state.ratLeft + this.state.incr})\n        if (this.state.dialogueBottom < 0) {\n          let dialogueBottom = this.state.dialogueBottom + this.state.incr;\n          if (dialogueBottom > 0) dialogueBottom = 0;\n          this.setState({incr: this.state.incr * 0.95});\n          this.setState({dialogueBottom})\n        }\n      } else {\n        window.clearInterval(this.ratMoveInInterval);\n        this.startTextMoving();\n      }\n    }, this.ratMoveSpeed);\n  }\n\n  sendRatOut() {\n    window.clearInterval(this.ratMoveInInterval);\n    this.setState({responses: \"\", incr: 1})\n    this.ratMoveOutInterval = window.setInterval(() => {\n      if (this.state.ratLeft > OFF_LEFT) {\n        this.setState({ratLeft: this.state.ratLeft - this.state.incr})\n        if (this.state.dialogueBottom > OFF_BOTTOM) {\n          let dialogueBottom = this.state.dialogueBottom - this.state.incr;\n          if (dialogueBottom < OFF_BOTTOM) dialogueBottom = OFF_BOTTOM;\n          this.setState({dialogueBottom})\n          this.setState({incr: this.state.incr * 1.05});\n        }\n      } else {\n        window.clearInterval(this.ratMoveOutInterval);\n        this.setState({charsRevealed: 0})\n        this.setNextRat();\n      }\n    }, this.ratMoveSpeed);\n  }\n\n  startTextMoving() {\n    this.setState({charsRevealed: 0});\n    this.textInterval = window.setInterval(() => {\n      let charsRevealed = this.state.charsRevealed + 1;\n      if (charsRevealed > this.activeRats[this.state.ratIndex].dialogue[this.props.round].length) {\n      } else {\n        this.setState({charsRevealed})\n      }\n    }, this.charSpeed)\n  }\n\n  setNextRat() {\n    let newRatIndex = this.state.ratIndex + 1;\n    // If that was the last rat, advance to the rose ceremony\n    if (newRatIndex === this.ratNames.length) {\n      this.props.goToRoseCeremony();\n    } else {\n      this.setState ({ratIndex: newRatIndex})\n    }\n    this.sendRatIn();\n  }\n\n  // After you submit your response, choose a new rat\n  submitResponse() {\n    window.clearInterval(this.textInterval)\n    this.sendRatOut();\n  }\n\n  getRandomResponses() {\n    // Make sure we get random, different responses\n    const numResponses = 3;\n    // Shuffle all responses\n    responsesJson.sort( () => .5 - Math.random() )\n    let responses = [];\n    // Choose the first n\n    for (let i = 0; i < numResponses; i++) {\n      let responseText = responsesJson[i]\n      let responseDiv = <button onClick={this.submitResponse.bind(this)} key={i}>{responseText}</button>\n      responses.push(responseDiv);\n    }\n    this.setState({responses});\n  }\n\n  // You get a random rat, they talk to you, you can respond, after you respond another rat shows up\n  render() {\n    let ratDialogue = this.activeRats[this.state.ratIndex].dialogue[this.props.round].substring(0, this.state.charsRevealed);\n    if (ratDialogue.length === 0) ratDialogue = \"...\";\n    return (\n      <div id=\"talkingToRatsScreen\" className=\"screen\">\n      <img id=\"playerRat\" \n      src={`/ratchelor/img/Couch/you.png`}></img>\n      <img id=\"talkingRat\" \n      style={{left: `${this.state.ratLeft}px`, top: `${this.state.ratTop}px`}}\n      src={`/ratchelor/img/Couch/${this.activeRats[this.state.ratIndex].filename}.png`}></img>\n      <div id=\"dialogueContainer\" style={{bottom: `${this.state.dialogueBottom}px`}}>\n        <div id=\"ratName\">{this.activeRats[this.state.ratIndex].name}</div>\n        <div id=\"ratDialogue\">{ratDialogue}</div>\n      </div>\n      <div id=\"responses\" style={{bottom: `${this.state.dialogueBottom + 10}px`}}>{this.state.responses}</div>\n    </div>\n    );\n  }\n}\n\nexport default TalkingToRats;\n\n","import React from \"react\";\n\nclass RoseCeremony extends React.Component {\n  constructor(props) {\n    super(props);\n    // Randomly shuffle the rats for this round\n    this.ratNames = props.activeRatNames.sort(function (a, b) { return 0.5 - Math.random() })\n    // Get all of the round's rats based on their names\n    this.activeRats = this.ratNames.map((ratName) => this.props.getRatByName(ratName));\n    // How many roses you have to give out\n    this.numRoses = this.props.numRoses;\n\n    this.state = {\n      selectedRats: [],\n      giveRosesButton: \"\"\n    }\n  }\n\n  // When a rat is clicked\n  selectRat(ratName, id) {\n    // Get the element for the current rat button\n    const element = document.getElementById(id);\n\n    // If it's already chosen, deselect it\n    if (this.state.selectedRats.indexOf(ratName) != -1) {\n      const index = this.state.selectedRats.indexOf(ratName);\n      const newSelectedRats = this.state.selectedRats;\n      newSelectedRats.splice(index, 1);\n      this.setState({selectedRats: newSelectedRats});\n      element.classList.remove(\"selectedRat\");\n      this.setState({giveRosesButton: \"\"})\n      return;\n    }\n\n    // If you've already selected the max rats, you can't select another\n    if (this.state.selectedRats.length === this.numRoses) {\n      return;\n    }\n\n    // Otherwise, select this rat\n    let newSelectedRats = this.state.selectedRats;\n    newSelectedRats.push(ratName);\n    element.classList.add(\"selectedRat\");\n\n    // If that was the final rat, display the advance button\n    if (this.state.selectedRats.length === this.numRoses) {\n      let giveRosesButton;\n      if (this.numRoses == 1){\n        giveRosesButton = <button onClick={this.endRoseCeremony.bind(this)}>Choose Contestant</button>;\n      }\n      else{\n        giveRosesButton = <button onClick={this.endRoseCeremony.bind(this)}>Choose Contestants</button>;\n      }\n      this.setState({giveRosesButton});\n      \n    } else {\n      this.setState({giveRosesButton: \"\"});\n    }\n\n    // Force a UI update for the rat list\n    this.setState({});\n  }\n\n  endRoseCeremony() {\n    this.props.setActiveRats(this.state.selectedRats);\n    this.props.advanceState();\n  }\n\n  render() {\n    let ratsList = []\n    // Create a clickable div for every rat in the game\n    for (let i = 0; i < this.activeRats.length; i++) {\n      let filename = `/ratchelor/img/Characters/${this.activeRats[i].filename}.png`\n      ratsList.push(\n        <div key={i} id={`rat${i}`} className=\"ratList\" onClick={() => {\n            this.selectRat(this.activeRats[i].name, `rat${i}`);\n          }}>\n          {/* {`${this.activeRats[i].name}`} */}\n          <img className=\"ratPic\" src={filename}/>\n          <img className=\"rosePic\" src=\"/ratchelor/img/temprose.png\"/>\n        </div>\n      )\n    }\n    let roseContainer = []\n    for (let i = 0; i < this.props.numRoses - this.state.selectedRats.length; i++) {\n      roseContainer.push(<img className=\"roseIcon\" src=\"/ratchelor/img/temprose.png\"></img>)\n    }\n    return (\n      <div id=\"roseCeremonyScreen\" className=\"screen\">\n        <div id=\"roseContainer\">{roseContainer}</div>\n        <div id=\"ratListContainer\"> {ratsList}</div>\n        <div id=\"giveRosesButton\"> {this.state.giveRosesButton}</div>\n    </div>\n    );\n  }\n}\n\nexport default RoseCeremony;\n\n","import React from \"react\";\n\n\nclass AnimeEnding extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id=\"animeEndingScreen\" className=\"screen\">\n        <img id=\"animePic\" src={`/ratchelor/img/Anime/${this.props.finalRat.filename}.jpg`}></img>\n        <div id=\"animeText\"> {this.props.finalRat.dialogue[this.props.finalRat.dialogue.length - 1]}</div>\n        <button id=\"restartButton\" onClick={this.props.restartGame}>Restart?</button>\n    </div>\n    );\n  }\n}\n\nexport default AnimeEnding;\n\n","import \"./App.css\";\nimport React from \"react\";\nimport IntroScreen from \"./components/IntroScreen\";\nimport RatSelect from \"./components/RatSelect\";\nimport TalkingToRats from \"./components/TalkingToRats\";\nimport RoseCeremony from \"./components/RoseCeremony\";\nimport AnimeEnding from \"./components/AnimeEnding\";\n\nimport ratsJson from './rats.json';\n\n// Game Stages\nconst INTRO = 0;\nconst RAT_SELECT = 1;\nconst TALKING_TO_RATS = 2;\nconst ROSE_CEREMONY = 3;\nconst ANIME_ENDING = 4;\nconst SPECIAL_ENDING = 5;\n\nclass RatchelorGame extends React.Component {\n  constructor() {\n    super();\n    // Num rats the person should select at the very beginning\n    this.numRatsInGame = 7;\n    // How many rounds there are\n    this.numRounds = 5;\n    // How many roses get given out each round\n    this.rosesPerRound = [5, 4, 3, 2, 1];\n    this.state = {\n      // What phase of the game we're in\n      gameStage: INTRO,\n      // What round of the rose-talking loop we're on\n      roundNum: 0,\n      // String list of all rat names currently still in the game\n      activeRatNames: [],\n      // Text for interlude screens that fall down\n      interludeText: \"Round 1\"\n    };\n  }\n\n  // Reset everything to restart the game\n  restartGame() {\n    this.setState({\n      gameStage: INTRO,\n      roundNum: 0,\n      activeRatNames: []\n    })\n  }\n\n  // Takes a string rat name and returns the Json object with additional details\n  getRatByName(name) {\n    for (let i = 0; i < ratsJson.length; i++) {\n      if (ratsJson[i].name === name) {\n        return ratsJson[i];\n      }\n    }\n  }\n\n  render() {\n    let screen = \"\";\n    if (this.state.gameStage === INTRO) {\n      // Intro screen: advances to next stage when complete\n      screen = <IntroScreen onClick={() => {this.setState({gameStage: RAT_SELECT})}}/> \n\n    } else if (this.state.gameStage === RAT_SELECT) {\n      // Rat select screen: \n      //    modifies the currently active rat names\n      //    advances to the next stage when complete\n      screen = <RatSelect \n          rats={ratsJson} \n          numRatsInGame={this.numRatsInGame} \n          advanceState={() => this.setState({gameStage: TALKING_TO_RATS})}\n          setActiveRats={(selectedRats) => {this.setState({activeRatNames: selectedRats});}}\n          />\n    } else if (this.state.gameStage === TALKING_TO_RATS) {\n      // Talking to rats screen:\n      //    advances to the rose ceremony when done\n      screen = <TalkingToRats\n          activeRatNames={this.state.activeRatNames}\n          getRatByName={this.getRatByName}\n          round={this.state.roundNum}\n          goToRoseCeremony={() => this.setState({gameStage: ROSE_CEREMONY})}\n        />\n    } else if (this.state.gameStage === ROSE_CEREMONY) {\n      // Rose ceremony screen:\n      //    either advances to the next talking round, or advances to the anime ending\n      //    modifies the currently active rat names\n      screen = \n        <RoseCeremony\n          activeRatNames={this.state.activeRatNames}\n          getRatByName={this.getRatByName}\n          numRoses={this.rosesPerRound[this.state.roundNum]}\n          setActiveRats={(selectedRats) => {this.setState({activeRatNames: selectedRats});}}\n          advanceState={() => {\n            // Update the current round number\n            const newRoundNum = this.state.roundNum + 1;\n            // If that was the last round, advance to Anime\n            if (newRoundNum === this.numRounds) {\n              this.setState({gameStage: ANIME_ENDING});\n            // Else, keep talking to rats\n            } else {\n              this.setState({gameStage: TALKING_TO_RATS, roundNum: newRoundNum})\n            }\n          }}\n        />\n    } else if (this.state.gameStage === ANIME_ENDING) {\n      // Anime ending screen:\n      //    allows game to be restarted\n      screen = \n        <AnimeEnding\n          finalRat={this.getRatByName(this.state.activeRatNames[0])}\n          restartGame={this.restartGame.bind(this)}\n        />\n   \n    }\n    return (\n      <div id=\"game\">\n        <img id=\"frame\" src=\"/ratchelor/img/frameSmaller.png\"></img>\n        <div id=\"interludeContainer\">\n        <div id=\"interlude\">\n          <div id=\"interludeText\">{this.state.interludeText}</div>\n        </div>\n        {screen}\n        </div>\n\n       </div>\n    )\n  }\n}\n\n\n\nexport default RatchelorGame;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}