{"version":3,"sources":["components/IntroScreen.js","components/RatSelect.js","components/TalkingToRats.js","components/RoseCeremony.js","components/AnimeEnding.js","App.js","index.js"],"names":["IntroScreen","id","onClick","this","props","React","Component","RatSelect","onClickSelectRats","setActiveRats","state","selectedRats","advanceState","selectRatsButton","ratName","element","document","getElementById","indexOf","index","newSelectedRats","splice","setState","classList","remove","length","numRatsInGame","push","add","ratsList","i","filename","rats","className","selectRat","name","src","TalkingToRats","ratNames","activeRatNames","sort","a","b","Math","random","activeRats","map","getRatByName","responses","responsesJson","charSpeed","ratIndex","charsRevealed","startTextMoving","getRandomResponses","interval","window","setInterval","dialogue","round","clearInterval","newRatIndex","goToRoseCeremony","responseText","responseDiv","submitResponse","bind","ratDialogue","substring","RoseCeremony","numRoses","giveRosesButton","endRoseCeremony","roseContainer","AnimeEnding","finalRat","restartGame","RatchelorGame","numRounds","rosesPerRound","gameStage","roundNum","ratsJson","newRoundNum","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.09847a21.chunk.js","sourcesContent":["import React from \"react\";\n\nclass IntroScreen extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div id=\"introScreen\">\n        <button onClick={this.props.onClick}>Embark</button>\n        <div id=\"hideme\"/>\n    </div>\n    );\n  }\n}\n\nexport default IntroScreen;\n\n","import React from \"react\";\n\nclass RatSelect extends React.Component {\n  constructor() {\n    super();\n\n    // Once you've select the rats, advance to the next stage\n    this.onClickSelectRats = () => {\n      this.props.setActiveRats(this.state.selectedRats);\n      this.props.advanceState();\n    }\n\n    this.state = {\n      selectedRats: [],\n      selectRatsButton: \"\"\n    }\n  }\n\n  // When a rat is clicked\n  selectRat(ratName, id) {\n    // Get the element for the current rat button\n    const element = document.getElementById(id);\n\n    // If it's already chosen, deselect it\n    if (this.state.selectedRats.indexOf(ratName) != -1) {\n      const index = this.state.selectedRats.indexOf(ratName);\n      const newSelectedRats = this.state.selectedRats;\n      newSelectedRats.splice(index, 1);\n      this.setState({selectedRats: newSelectedRats});\n      element.classList.remove(\"selectedRat\");\n      this.setState({selectRatsButton: \"\"})\n      return;\n    }\n\n    // If you've already selected the max rats, you can't select another\n    if (this.state.selectedRats.length === this.props.numRatsInGame) {\n      return;\n    }\n\n    // Otherwise, select this rat\n    let newSelectedRats = this.state.selectedRats;\n    newSelectedRats.push(ratName);\n    element.classList.add(\"selectedRat\");\n\n    // If that was the final rat, display the advance button\n    if (this.state.selectedRats.length === this.props.numRatsInGame) {\n      let selectRatsButton = <button onClick={this.onClickSelectRats}>Continue</button>\n      this.setState({selectRatsButton});\n    } else {\n      this.setState({selectRatsButton: \"\"});\n    }\n\n    // Force a UI update for the rat list\n    this.setState({});\n  }\n\n  render() {\n    let ratsList = []\n    // Create a clickable div for every rat in the game\n    for (let i = 0; i < this.props.rats.length; i++) {\n      let filename = `/ratchelor/img/Characters/${this.props.rats[i].filename}.png`\n      ratsList.push(\n        <div key={i} id=\"ratContainer\">\n          <div  id={`rat${i}`} className=\"ratListItem\" onClick={() => {\n            this.selectRat(this.props.rats[i].name, `rat${i}`);\n          }}>\n          <div className=\"ratName\">{`${this.props.rats[i].name}`}</div>\n\n          <img className=\"ratPic\" src={filename}/>\n        </div>\n        </div>\n      )\n    }\n    \n    return (\n      <div id=\"ratSelectScreen\">\n        <div id=\"chooseText\">Choose your {`${this.props.numRatsInGame}`} lovely contestants:</div>\n        <div id=\"ratListContainer\">{ratsList}</div>\n        {this.state.selectRatsButton}\n    </div>\n    );\n  }\n}\n\nexport default RatSelect;\n\n","import React from \"react\";\nimport responsesJson from '../responses.json';\n\n\nclass TalkingToRats extends React.Component {\n  constructor(props) {\n    super(props);\n    // Randomly shuffle the rats for this round\n    this.ratNames = props.activeRatNames.sort(function (a, b) { return 0.5 - Math.random() })\n    // Get all of the round's rats based on their names\n    this.activeRats = this.ratNames.map((ratName) => this.props.getRatByName(ratName));\n    // Store all of your canned responses in an array\n    this.responses = responsesJson;\n    this.charSpeed = 36;\n    this.state = {\n      ratIndex: 0,\n      charsRevealed: 0,\n      responses: [],\n    }\n  }\n\n  componentDidMount() {\n    this.startTextMoving();\n    this.getRandomResponses();\n  }\n\n  startTextMoving() {\n    this.setState({charsRevealed: 0});\n    this.interval = window.setInterval(() => {\n      let charsRevealed = this.state.charsRevealed + 1;\n      if (charsRevealed > this.activeRats[this.state.ratIndex].dialogue[this.props.round].length) {\n      } else {\n        this.setState({charsRevealed})\n      }\n    }, this.charSpeed)\n  }\n\n  // After you submit your response, choose a new rat\n  submitResponse() {\n    window.clearInterval(this.interval)\n    this.startTextMoving();\n    this.getRandomResponses();\n    let newRatIndex = this.state.ratIndex + 1;\n    // If that was the last rat, advance to the rose ceremony\n    if (newRatIndex === this.ratNames.length) {\n      this.props.goToRoseCeremony();\n    } else {\n      this.setState ({ratIndex: newRatIndex})\n    }\n  }\n\n  getRandomResponses() {\n    // Make sure we get random, different responses\n    const numResponses = 3;\n    // Shuffle all responses\n    responsesJson.sort( () => .5 - Math.random() )\n    let responses = [];\n    // Choose the first n\n    for (let i = 0; i < numResponses; i++) {\n      let responseText = responsesJson[i]\n      let responseDiv = <button onClick={this.submitResponse.bind(this)} key={i}>{responseText}</button>\n      responses.push(responseDiv);\n    }\n    this.setState({responses});\n  }\n\n  // You get a random rat, they talk to you, you can respond, after you respond another rat shows up\n  render() {\n    let ratDialogue = this.activeRats[this.state.ratIndex].dialogue[this.props.round].substring(0, this.state.charsRevealed);\n    if (ratDialogue.length === 0) ratDialogue = \".\";\n    return (\n      <div id=\"talkingToRatsScreen\">\n      <img id=\"playerRat\" src={`/ratchelor/img/Couch/you.png`}></img>\n      <img id=\"talkingRat\" src={`/ratchelor/img/Couch/${this.activeRats[this.state.ratIndex].filename}.png`}></img>\n\n      <div id=\"dialogueContainer\">\n        <div id=\"ratName\">{this.activeRats[this.state.ratIndex].name}</div>\n        <div id=\"ratDialogue\">{ratDialogue}</div>\n      </div>\n      <div id=\"responses\">{this.state.responses}</div>\n    </div>\n    );\n  }\n}\n\nexport default TalkingToRats;\n\n","import React from \"react\";\n\nclass RoseCeremony extends React.Component {\n  constructor(props) {\n    super(props);\n    // Randomly shuffle the rats for this round\n    this.ratNames = props.activeRatNames.sort(function (a, b) { return 0.5 - Math.random() })\n    // Get all of the round's rats based on their names\n    this.activeRats = this.ratNames.map((ratName) => this.props.getRatByName(ratName));\n    // How many roses you have to give out\n    this.numRoses = this.props.numRoses;\n\n    this.state = {\n      selectedRats: [],\n      giveRosesButton: \"\"\n    }\n  }\n\n  // When a rat is clicked\n  selectRat(ratName, id) {\n    // Get the element for the current rat button\n    const element = document.getElementById(id);\n\n    // If it's already chosen, deselect it\n    if (this.state.selectedRats.indexOf(ratName) != -1) {\n      const index = this.state.selectedRats.indexOf(ratName);\n      const newSelectedRats = this.state.selectedRats;\n      newSelectedRats.splice(index, 1);\n      this.setState({selectedRats: newSelectedRats});\n      element.classList.remove(\"selectedRat\");\n      this.setState({giveRosesButton: \"\"})\n      return;\n    }\n\n    // If you've already selected the max rats, you can't select another\n    if (this.state.selectedRats.length === this.numRoses) {\n      return;\n    }\n\n    // Otherwise, select this rat\n    let newSelectedRats = this.state.selectedRats;\n    newSelectedRats.push(ratName);\n    element.classList.add(\"selectedRat\");\n\n    // If that was the final rat, display the advance button\n    if (this.state.selectedRats.length === this.numRoses) {\n      let giveRosesButton = <button onClick={this.endRoseCeremony.bind(this)}>Choose Contestants</button>\n        this.setState({giveRosesButton})\n    } else {\n      this.setState({giveRosesButton: \"\"});\n    }\n\n    // Force a UI update for the rat list\n    this.setState({});\n  }\n\n  endRoseCeremony() {\n    this.props.setActiveRats(this.state.selectedRats);\n    this.props.advanceState();\n  }\n\n  render() {\n    let ratsList = []\n    // Create a clickable div for every rat in the game\n    for (let i = 0; i < this.activeRats.length; i++) {\n      let filename = `/ratchelor/img/Characters/${this.activeRats[i].filename}.png`\n      ratsList.push(\n        <div key={i} id={`rat${i}`} className=\"ratList\" onClick={() => {\n            this.selectRat(this.activeRats[i].name, `rat${i}`);\n          }}>\n          {/* {`${this.activeRats[i].name}`} */}\n          <img className=\"ratPic\" src={filename}/>\n          <img className=\"rosePic\" src=\"/ratchelor/img/temprose.png\"/>\n        </div>\n      )\n    }\n    let roseContainer = []\n    for (let i = 0; i < this.props.numRoses - this.state.selectedRats.length; i++) {\n      roseContainer.push(<img className=\"roseIcon\" src=\"/ratchelor/img/temprose.png\"></img>)\n    }\n    return (\n      <div id=\"roseCeremonyScreen\">\n        <div id=\"roseContainer\">{roseContainer}</div>\n        <div id=\"ratListContainer\"> {ratsList}</div>\n        <div id=\"giveRosesButton\"> {this.state.giveRosesButton}</div>\n    </div>\n    );\n  }\n}\n\nexport default RoseCeremony;\n\n","import React from \"react\";\n\n\nclass AnimeEnding extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id=\"animeEndingScreen\">\n        You chose {`${this.props.finalRat.name}`}:\n        <br/>\n        {this.props.finalRat.dialogue[this.props.finalRat.dialogue.length - 1]}\n        <button onClick={this.props.restartGame}>Restart Game</button>\n    </div>\n    );\n  }\n}\n\nexport default AnimeEnding;\n\n","import \"./App.css\";\nimport React from \"react\";\nimport IntroScreen from \"./components/IntroScreen\";\nimport RatSelect from \"./components/RatSelect\";\nimport TalkingToRats from \"./components/TalkingToRats\";\nimport RoseCeremony from \"./components/RoseCeremony\";\nimport AnimeEnding from \"./components/AnimeEnding\";\n\nimport ratsJson from './rats.json';\n\n// Game Stages\nconst INTRO = 0;\nconst RAT_SELECT = 1;\nconst TALKING_TO_RATS = 2;\nconst ROSE_CEREMONY = 3;\nconst ANIME_ENDING = 4;\nconst SPECIAL_ENDING = 5;\n\nclass RatchelorGame extends React.Component {\n  constructor() {\n    super();\n    // Num rats the person should select at the very beginning\n    this.numRatsInGame = 8;\n    // How many rounds there are\n    this.numRounds = 5;\n    // How many roses get given out each round\n    this.rosesPerRound = [6, 4, 3, 2, 1];\n    this.state = {\n      // What phase of the game we're in\n      gameStage: INTRO,\n      // What round of the rose-talking loop we're on\n      roundNum: 0,\n      // String list of all rat names currently still in the game\n      activeRatNames: [],\n    };\n  }\n\n  // Reset everything to restart the game\n  restartGame() {\n    this.setState({\n      gameStage: INTRO,\n      roundNum: 0,\n      activeRatNames: []\n    })\n  }\n\n  // Takes a string rat name and returns the Json object with additional details\n  getRatByName(name) {\n    for (let i = 0; i < ratsJson.length; i++) {\n      if (ratsJson[i].name === name) {\n        return ratsJson[i];\n      }\n    }\n  }\n\n  render() {\n    if (this.state.gameStage === INTRO) {\n      // Intro screen: advances to next stage when complete\n      return (\n        <IntroScreen onClick={() => {this.setState({gameStage: RAT_SELECT})}}/> \n      );\n    } else if (this.state.gameStage === RAT_SELECT) {\n      // Rat select screen: \n      //    modifies the currently active rat names\n      //    advances to the next stage when complete\n      return (\n        <RatSelect \n          rats={ratsJson} \n          numRatsInGame={this.numRatsInGame} \n          advanceState={() => this.setState({gameStage: TALKING_TO_RATS})}\n          setActiveRats={(selectedRats) => {this.setState({activeRatNames: selectedRats});}}\n          />\n      )\n    } else if (this.state.gameStage === TALKING_TO_RATS) {\n      // Talking to rats screen:\n      //    advances to the rose ceremony when done\n      return (\n        <TalkingToRats\n          activeRatNames={this.state.activeRatNames}\n          getRatByName={this.getRatByName}\n          round={this.state.roundNum}\n          goToRoseCeremony={() => this.setState({gameStage: ROSE_CEREMONY})}\n        />\n      )\n    } else if (this.state.gameStage === ROSE_CEREMONY) {\n      // Rose ceremony screen:\n      //    either advances to the next talking round, or advances to the anime ending\n      //    modifies the currently active rat names\n      return (\n        <RoseCeremony\n          activeRatNames={this.state.activeRatNames}\n          getRatByName={this.getRatByName}\n          numRoses={this.rosesPerRound[this.state.roundNum]}\n          setActiveRats={(selectedRats) => {this.setState({activeRatNames: selectedRats});}}\n          advanceState={() => {\n            // Update the current round number\n            const newRoundNum = this.state.roundNum + 1;\n            // If that was the last round, advance to Anime\n            if (newRoundNum === this.numRounds) {\n              this.setState({gameStage: ANIME_ENDING});\n            // Else, keep talking to rats\n            } else {\n              this.setState({gameStage: TALKING_TO_RATS, roundNum: newRoundNum})\n            }\n          }}\n        />\n      )\n    } else if (this.state.gameStage === ANIME_ENDING) {\n      // Anime ending screen:\n      //    allows game to be restarted\n      return (\n        <AnimeEnding\n          finalRat={this.getRatByName(this.state.activeRatNames[0])}\n          restartGame={this.restartGame.bind(this)}\n        />\n      )\n    }\n  }\n}\n\n\n\nexport default RatchelorGame;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}